flourish
========

[Travis build status: ![](https://travis-ci.org/norm/flourish.svg)](https://travis-ci.org/norm/flourish/)

A static site generator built around the idea that combining Markdown files
and templates is **not enough** for anything but the most basic needs, and
that enabling plugins is mostly a panacea for being able to really develop
functionality that is site specific.

Heavily inspired by django's [class based views][cbv] and James Aylett's
[django file-backed objects][dfbo].


How it works
------------

### Adding source files

Flourish first gathers all [TOML][toml] or standalone Markdown files found
under a source directory and allows this to be iterated and queried for
individual items.

Any source TOML file can have one or more Markdown blocks added to it
if they share the same slug part of the filename. For example, a
`blog-post.toml` file will read in `blog-post.summary.markdown` as
though it were specified as the key `summary_markdown` in the TOML.

Any key in the resulting source configuration that ends `_markdown`
will be converted to HTML, eg `body_markdown` is converted and the 
result stored in `body`.

```toml
# example TOML file 
body_markdown = """
# Part One

I come from Markdown.
"""
body = 'I get replaced with HTML created from `body_markdown` above'
category = 'article'
published = 2016-06-04T11:00:00Z
series = 'series-in-three-parts'
tag = ['series', 'one']
title = 'Part One'
type = 'post'
```

Standalone Markdown sources are a file named `<slug>.markdown`, where `<slug>`
does not contain a dot (this is to differentiate it from a Markdown block
intended to be added to an existing TOML source file).

Markdown source files can include TOML front matter by starting the file with
three hyphens (`---`) on a line, including the TOML, then finishing it with
three hyphens on a line. All other content is expected to be Markdown and is
stored in the key `body_markdown`.

### Adding URLs

URLs represent pages that Flourish will be able to generate from the current
source. New URLs need two parameters: the path, and a symbolic name with which
to reference the URL.

```python
flourish.add_url('/',           'homepage')
flourish.add_url('/tags/#tag',  'tags-tag-index')
flourish.add_url('/#slug',      'page-detail')
flourish.add_url('/#tag/#slug', 'tagged-page-detail')
```

A hash (#) in the path of a URL represents a replaceable token, that will be
substituted as the output is generated. The alphanumerics that follow the hash
represent the key to use (as found in source TOML). The URLs in the example
above, used with a source directory containing a single file `page`:

```toml
title = 'Example page'
tag = ['example', 'introduction']
```

...would mean the following URLs are capable of being generated by flourish:

* `/`
* `/tags/example`
* `/tags/introduction`
* `/page`
* `/example/page`
* `/introduction/page`


Usage
-----

Currently, flourish doesn't actually generate anything, it is still in
development.

```python
from datetime import datetime
from flourish import Flourish

source_dir = 'tests/source'
fl = Flourish(source_dir)

# --- queries:
# get everything, in filesystem order
for source in fl.sources.all():
    print source

# get everything in reverse order of 'publication'
for source in fl.sources.all().order_by('-published')
    print source

# get a slice
for source in fl.sources.all()[0:2]:
    print source

# get one thing by "slug" (its filename minus .toml)
print fl.sources.get('series/part-one')

# get sources by attribute
posts = fl.sources.filter(type='post')
older = fl.sources.filter(published__lte=datetime(2016, 1, 1))
future = fl.sources.filter(published__gt=datetime.now())
twos = fl.sources.filter(tag__contains='two')
series = fl.sources.filter(series__set='')

# --- URLs:
fl.add_url('/',           'homepage')
fl.add_url('/tags/#tag',  'tags-tag-index')
fl.add_url('/#slug',      'page-detail')
fl.add_url('/#tag/#slug', 'tagged-page-detail')

fl.resolve_url('homepage')
fl.resolve_url('tagged-page-detail', {'tag': 'css', 'slug': 'specificity'})
```



[toml]: https://github.com/toml-lang/toml
[md]: http://daringfireball.net/projects/markdown/
[cbv]: https://docs.djangoproject.com/en/stable/topics/class-based-views/
[dfbo]: https://github.com/jaylett/django-filebacked-objects
